// Code generated by go-bindata.
// sources:
// html/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\x6d\x4f\x13\x4b\x14\xfe\xce\xaf\x98\x3b\x97\x64\xdb\x84\xee\xde\xde\x7b\x93\x7b\x83\xbb\x4d\x08\x60\xc2\x07\xd1\x28\x26\x1a\xe3\x87\x61\x77\xca\x4e\xd9\x37\x76\x67\x09\x0d\x21\xb1\x20\x49\x95\x68\x49\x0c\xa8\x88\x0a\x04\x23\x6a\x44\x8c\x24\x84\x97\x7f\x53\x77\x0b\xff\xc2\xd9\x5d\xfa\xb2\xb6\x95\xd6\xcf\xb4\x49\xf7\x9c\x39\xcf\x3c\xe7\x9c\xd9\x27\x67\x2a\xfe\x31\x74\x7d\x70\xec\xee\x8d\x61\xa0\x52\x5d\xcb\xf4\x88\xc1\x03\x68\xc8\x98\x90\x60\x0e\xc1\x4c\x0f\x00\xa2\x8a\x91\x12\x18\xcc\xd4\x31\x45\x40\x56\x91\xed\x60\x2a\x41\x97\x66\x53\xff\x43\x20\xc4\x82\xa6\x41\xb1\xc1\x82\x23\xc3\x12\x56\x26\x70\x9f\xac\xda\xa6\x8e\xa5\x34\x64\x19\xa8\x95\xc2\x53\x2e\x99\x96\xe0\x9d\xd4\xed\x81\xd4\xa0\xa9\x5b\x88\x92\x71\x0d\xd7\x49\x28\xa1\x1a\xce\xf8\x8f\x1f\x9c\x15\x3e\xf8\x0b\x8b\xde\xc6\xd7\x72\x61\xd7\xdf\x5e\xaf\xec\x6f\x89\x42\x14\x8c\x80\x1a\x31\x26\x81\x6a\xe3\xac\x04\x05\x41\x56\x0c\x5e\x41\x94\x7d\x19\x99\xc3\x1b\x98\x0a\x69\x3e\xfd\x17\xff\x9f\x20\x3b\x8e\x90\x9b\x72\xb1\x9d\x0f\x01\x63\x11\x40\x27\x06\xcf\x22\x10\xd8\x58\x93\xa0\x43\xf3\x6c\x51\xc5\x98\x42\x40\xf3\x16\x96\x20\xc5\x33\x54\x08\x01\xd5\xba\x1c\xd9\x26\x16\x05\x8e\x2d\x87\xf9\x4c\x05\xf3\xe7\xb4\xb2\xa9\x9f\x67\x48\xb1\x9c\x69\xfe\x9f\x90\x3d\xe7\xc4\xb8\x72\x68\x1a\x45\x14\x30\x23\x0a\x91\xd5\x9a\xb9\x6d\x27\xb9\x76\x8d\x74\x98\x4a\x14\xaa\x2f\x52\x1c\x37\x95\x3c\x90\x35\xe4\x38\x12\x24\x86\x82\x67\xe0\x79\x2d\x6a\x3a\x32\x00\x68\xf9\x06\x22\x90\x50\x45\x89\x61\x91\x80\x28\x12\x9c\x20\x14\x4f\x92\x54\xb8\x00\xab\x1c\x22\xad\x4b\x27\xf2\xed\xba\x13\x86\x1b\x5d\x96\x73\xaf\xe4\x2d\x3f\xf1\x4a\xc5\x72\xe1\x0b\x33\x2a\xef\xf7\x1a\xd1\x42\x1c\xde\xb4\xbb\xf2\xe8\xd0\xdb\x5d\xab\x3c\xdc\xac\x1c\xac\x9d\xee\x7c\xf6\xe6\x5f\xb2\xba\x2b\x3b\xbb\x5e\xf1\x5d\x37\x34\xde\x9b\x25\xef\xa4\xf4\xbb\x45\xb0\x63\x3b\xdd\x7c\xe6\xbd\x3d\xf2\x8f\x56\xd9\xf9\x79\xcb\xc5\xd3\x9d\x13\xff\xc5\xd3\xca\xca\x47\xaf\x74\xd0\x0d\xd3\xd9\xab\x63\xff\xdb\x16\x6b\x21\x2a\xa8\xab\x16\x0e\xf7\xfd\xf5\xa2\xff\xbc\xab\xbe\xcb\x85\xd7\x2c\xd9\xf7\xe3\xd5\xe0\xf7\x68\xe9\x6c\x63\xb1\xab\xdd\x0b\x2b\xe5\xf9\xcd\xf2\xfc\x76\x79\xe1\x53\xdb\x7d\xcc\xab\x09\x20\x88\x34\x88\x43\xa4\x81\x26\x99\x5e\xa3\x67\x6d\x35\x6b\x9a\xf4\x52\x40\x97\x02\xaa\x79\x8d\x02\xaa\x8b\x83\x39\xc1\xe4\x89\x4f\xd4\x36\x33\xb1\xc6\xd6\x9b\x50\x4c\xd9\xd5\xd9\x6d\x95\xe4\x6d\xa6\xc5\x7c\x22\xeb\x1a\x32\x25\xa6\x91\x48\x82\xd9\x58\x75\xbd\x09\xee\xcf\xc6\x11\xc7\x25\xeb\x43\x38\x11\x87\x06\x1f\x0e\xe5\xd0\x0c\xd7\x0f\x9a\x23\x61\xd4\xb5\x35\x16\xe4\x90\x45\x84\xe0\x3a\xb4\x82\x12\x1c\xae\xaf\x35\x38\xc8\x73\xcb\x96\x83\x0d\x5c\x13\x62\xae\x79\x13\x27\x9b\x9a\xab\x1b\x0e\x07\xfa\xc1\xbd\x96\x94\xb3\x21\x67\x40\x38\x88\x6d\x4a\xb2\x04\x2b\xa3\x48\xc7\x5c\x0b\xb2\x38\x7c\xb8\x5a\xec\x18\x3b\xd9\x8b\xe1\xd7\xd8\x25\xa9\x5d\x0c\x1b\x70\xa9\x3a\xea\xea\xe3\xd8\xbe\x18\x7b\x13\x29\xc4\xfc\x55\x76\x41\x68\x40\x8f\x38\x03\x96\xa5\xb1\xf6\xd2\xff\xfe\x9d\xee\xac\x90\x21\x44\x3b\xe8\x6c\xd4\xec\x04\x75\x95\x30\xa1\xcc\x35\x81\xee\xc7\x56\xe6\x92\x57\x7a\x7e\xb6\xe3\xb7\x76\x34\x10\xd9\xad\x1b\xfe\x41\xfb\x11\x00\x00\xff\xff\x5d\x25\xfa\x99\xb1\x09\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 2481, mode: os.FileMode(420), modTime: time.Unix(1435984769, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

